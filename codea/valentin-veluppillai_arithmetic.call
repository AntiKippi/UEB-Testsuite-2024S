extern int64_t arith(long x, long y, long z);
extern int64_t add(long x, long y);
extern int64_t sub(long x, long y);
extern int64_t mul(long x, long y);
extern int64_t _and(long x, long y);
extern int64_t _not(long y);

int64_t x = 3;
int64_t y = 2;
int64_t z = 10;

int64_t correct = (18 + x) - (y*z) & ((int64_t)(-2));
int64_t result = arith(x << 1, y << 1, z << 1) >> 1;

// printf("%lli %lli\n", correct, result >> 1);
// printf("%lli, %lli, %lii, %lli, %lli\n", mul(2 << 1, 4 << 1) >> 1,
//                                          add(3 << 1, 9 << 1) >> 1,
//                                          sub(9 << 1, 7 << 1) >> 1,
//                                         _and(1 << 1, 3 << 1) >> 1,
//                                         _not(1 << 1) >> 1);

// printf("%lli, %lli, %lii, %lli, %lli\n", (2 * 4),
//                                          (3 + 9),
//                                          (9 - 7),
//                                          (1 & 3),
//                                          ~((int64_t)(1)));

int ret = (mul(2 << 1, 4 << 1) >> 1 == (2 * 4));
ret = ret && (add(3 << 1, 9 << 1) >> 1 == (3 + 9));
ret = ret && (sub(9 << 1, 7 << 1) >> 1 == (9 - 7));
ret = ret && (_and(1 << 1, 3 << 1) >> 1 == (1 & 3));
ret = ret && (_not(1 << 1) >> 1 == ~((int64_t)(1)));
ret = ret && (correct == result);
ret = ret && add((-1 << 1), (1 << 1) == 0);

RET(ret);
